openapi: 3.0.3
info:
  title: caps-m5
  version: 0.1.0 alpha
  description: Your project description
paths:
  /api/accounts/:
    get:
      operationId: accounts_list
      tags:
      - accounts
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRegister'
          description: ''
    post:
      operationId: accounts_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
  /api/accounts/{id_user}/created_reviews/:
    get:
      operationId: accounts_created_reviews_list
      parameters:
      - in: path
        name: id_user
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
  /api/accounts/{id_user}/received_reviews/:
    get:
      operationId: accounts_received_reviews_list
      parameters:
      - in: path
        name: id_user
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
  /api/accounts/{id_user}/service/:
    get:
      operationId: accounts_service_list
      parameters:
      - in: path
        name: id_user
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
          description: ''
    post:
      operationId: accounts_service_create
      parameters:
      - in: path
        name: id_user
        schema:
          type: string
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: ''
  /api/accounts/{id}/:
    get:
      operationId: accounts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: accounts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: accounts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: accounts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/login/:
    post:
      operationId: login_create
      tags:
      - login
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/reviews/{id_review}/:
    get:
      operationId: reviews_retrieve
      parameters:
      - in: path
        name: id_review
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: reviews_update
      parameters:
      - in: path
        name: id_review
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: reviews_partial_update
      parameters:
      - in: path
        name: id_review
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: reviews_destroy
      parameters:
      - in: path
        name: id_review
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this review.
        required: true
      tags:
      - reviews
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/services/{id_service}/reviews/:
    post:
      operationId: services_reviews_create
      parameters:
      - in: path
        name: id_service
        schema:
          type: string
        required: true
      tags:
      - services
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        country:
          type: string
          maxLength: 25
        state:
          type: string
          maxLength: 35
        city:
          type: string
          maxLength: 35
        street:
          type: string
          maxLength: 105
        number:
          type: integer
          maximum: 2147483647
          minimum: 0
        complement:
          type: string
          nullable: true
          maxLength: 255
        zip_code:
          type: string
          maxLength: 15
      required:
      - city
      - country
      - id
      - number
      - state
      - street
      - zip_code
    Critic:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
      required:
      - first_name
      - id
      - last_name
    PatchedReview:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        stars:
          allOf:
          - $ref: '#/components/schemas/StarsEnum'
          minimum: 0
          maximum: 2147483647
        description:
          type: string
          nullable: true
          maxLength: 255
        user_critic:
          allOf:
          - $ref: '#/components/schemas/Critic'
          readOnly: true
        user_criticized:
          allOf:
          - $ref: '#/components/schemas/Critic'
          readOnly: true
        service:
          allOf:
          - $ref: '#/components/schemas/Service'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 20
        last_name:
          type: string
          maxLength: 20
        is_provider:
          type: boolean
        description:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 55
        address:
          $ref: '#/components/schemas/Address'
        phone:
          type: string
          maxLength: 15
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        stars:
          allOf:
          - $ref: '#/components/schemas/StarsEnum'
          minimum: 0
          maximum: 2147483647
        description:
          type: string
          nullable: true
          maxLength: 255
        user_critic:
          allOf:
          - $ref: '#/components/schemas/Critic'
          readOnly: true
        user_criticized:
          allOf:
          - $ref: '#/components/schemas/Critic'
          readOnly: true
        service:
          allOf:
          - $ref: '#/components/schemas/Service'
          readOnly: true
      required:
      - id
      - service
      - user_critic
      - user_criticized
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          readOnly: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        category:
          type: string
          format: uuid
          readOnly: true
          nullable: true
      required:
      - category
      - id
      - price
      - title
    StarsEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 20
        last_name:
          type: string
          maxLength: 20
        is_provider:
          type: boolean
        description:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 55
        address:
          $ref: '#/components/schemas/Address'
        phone:
          type: string
          maxLength: 15
      required:
      - address
      - email
      - first_name
      - id
      - last_name
      - phone
    UserRegister:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 20
        last_name:
          type: string
          maxLength: 20
        is_provider:
          type: boolean
        description:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 55
        address:
          $ref: '#/components/schemas/Address'
      required:
      - address
      - email
      - first_name
      - id
      - last_name
      - password
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
